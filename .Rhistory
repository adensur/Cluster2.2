K=1000     #number of grad descent steps
N=17       #number of particles
r=init(N)
for(k in 1:K){
gu=gU(r)
if(U(r-l*gu)<U(r)){
r=r-l*gu
}else{
l=l/2
}
print(c(k,U(r),l))
}
plot(r)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
dir()
init=function(N,sd=1){#generates N particles with x,y,z random coordinates
x=rnorm(N,sd=sd)
y=rnorm(N,sd=sd)
data.frame(x=x,y=y)
}
U=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
ind=1
for(i in 2:N){
ind[i]=N*(i-1)+i
}
frame=data.frame(id="0",rx=r$x,ry=r$y)
x=merge(frame,frame,by="id")
x=x[-ind,]
y=(x[,4]-x[,2])^2+(x[,5]-x[,3])^2
sum(y^(-3))/2+sum(r^2)
}
U2=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
sum=0
for(i in 1:N){
sum1=0
if(i!=N){
for(j in (i+1):N){
sum1=sum1+sum((r[i,]-r[j,])^2)^(-3)
}
}
sum=sum+sum1+sum(r[i,]^2)
}
sum
}#initial one
gU=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
r2=r[-i,]
y=(r[i,j]-r2[,j])/(((r2[,1]-r[i,1])^2+(r2[,2]-r[i,2])^2)^4)
frame[i,j]=2*r[i,j]-6*sum(y)
}
}
frame
}
gU2=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
sum=0
for(k in 1:N){
if(k!=i){
sum=sum+(r[i,j]-r[k,j])/(sum((r[i,]-r[k,])^2)^4)
}
}
frame[i,j]=2*r[i,j]-6*sum
}
}
frame
}#initial one
#temperature function
r=init(27)
r
r=init(17)
r
N=dim(r)[1]
N
temp<-function(r,sd){
?rnorm()
rnorm(17,mean=0,sd=1)
sd=1
rnorm(2*N,mean=0,sd=1)
class(r)
temp<-function(r, sd){
N=dim(r)[1]
data.frame(x=r$x+rnorm(N,sd=sd),y=r$y+rnorm(N,sd=sd))
}
temp<-function(r, sd=1){
N=dim(r)[1]
data.frame(x=r$x+rnorm(N,sd=sd),y=r$y+rnorm(N,sd=sd))
}
temp(r)
plot(r)
getwd()
dir()
paste("/data/",17,".RDS")
paste("/data/",17,".RDS",sep="")
readRDS(file=paste("/data/",N,".RDS",sep=""))
readRDS(file=paste("data/",N,".RDS",sep=""))
reinit<-function(N=17){
readRDS(file=paste("data/",N,".RDS",sep=""))
}
r=reinit(27)
plot(r)
plot(temp(r))
plot(temp(r,0.1))
plot(temp(r,0.1))
plot(temp(r,0.1))
plot(temp(r,0.1))
plot(temp(r,0.1))
temp<-function(r, sd=1){
N=dim(r)[1]
data.frame(x=r$x+rnorm(N,sd=sd),y=r$y+rnorm(N,sd=sd),vx=0,vy=0)
}
temp(r)
vx=rnorm(N,sd=sd)
vy=rnorm(N,sd=sd)
sum(vx)
sum(vy)
vx=(vx-sum(vx)/length(vx))
vx
sum(vx)
vy=(vy-sum(vy)/length(vy))
sum(vy)
temp<-function(r, sd=1){
N=dim(r)[1]
vx=rnorm(N,sd=sd)
vx=(vx-sum(vx)/length(vx))
vy=rnorm(N,sd=sd)
vy=(vy-sum(vy)/length(vy))
data.frame(x=r$x+rnorm(N,sd=sd),y=r$y+rnorm(N,sd=sd),vx=0,vy=0)
}
temp(r)
temp<-function(r, sd=1){
N=dim(r)[1]
vx=rnorm(N,sd=sd)
vx=(vx-sum(vx)/length(vx))
vy=rnorm(N,sd=sd)
vy=(vy-sum(vy)/length(vy))
data.frame(x=r$x+rnorm(N,sd=sd),y=r$y+rnorm(N,sd=sd),vx=vx,vy=vy)
}
q=temp(r)
r
q
sum(q$vx)
sum(q$vy)
q
U(q)
U(r)
U(r)
U(q)
U(q[,1:2])
E<-function(r){
N=dim(r)[1]
U(r[,1:2])+sum(r$vx^2)+sum(r$vy^2)
}
E(r)
r
E(q)
E(q[1:2])
temp<-function(r, sd=1){
N=dim(r)[1]
vx=rnorm(N,sd=sd)
vx=(vx-sum(vx)/length(vx))
vy=rnorm(N,sd=sd)
vy=(vy-sum(vy)/length(vy))
data.frame(x=r$x,y=r$y,vx=vx,vy=vy)
}
E<-function(r){
N=dim(r)[1]
U(r[,1:2])+sum(r$vx^2)+sum(r$vy^2)
}
q=temp(r)
q
E(q)
E(temp(r))
E(temp(r,2))
E(temp(r,0.5))
sd=seq(0,10,by=0.05)
Es=sapply(sd,E)
E
Es=sapply(sd,function(x) E(temp(r,x)))
plot(sd,Es)
plot(sd,Es,type=|l)
plot(sd,Es,type="l")
sd=seq(0,100,by=0.05)
Es=sapply(sd,function(x) E(temp(r,x)))
plot(sd,Es,type="l")
init=function(N,sd=1){#generates N particles with x,y,z random coordinates
x=rnorm(N,sd=sd)
y=rnorm(N,sd=sd)
data.frame(x=x,y=y)
}
U=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
ind=1
for(i in 2:N){
ind[i]=N*(i-1)+i
}
frame=data.frame(id="0",rx=r$x,ry=r$y)
x=merge(frame,frame,by="id")
x=x[-ind,]
y=(x[,4]-x[,2])^2+(x[,5]-x[,3])^2
sum(y^(-3))/2+sum(r^2)
}
U3=function(r){
sum(mapply(function(xi,yi) {
sum(unlist(mapply(function(xk,yk) {
if(xi!=xk & yi!=yk){
((xi-xk)^2+(yi-yk)^2)^(-3)
}
},r$x,r$y)))
},r$x,r$y))/2+sum(r$x^2)+sum(r$y^2)
}#U rewritten as mapply(). It is not faster!
U4=function(r){
N=dim(r)[1]
if(N>2){
sum(sapply(1:(N-1),function(i) {
sum(sapply((i+1):N,function(k){
((r$x[i]-r$x[k])^2+(r$y[i]-r$y[k])^2)^(-3)
}))
}))+sum(r$x^2)+sum(r$y^2)
}
}#U rewritten as sapply(). It is not faster!
U2=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
sum=0
for(i in 1:N){
sum1=0
if(i!=N){
for(j in (i+1):N){
sum1=sum1+sum((r[i,]-r[j,])^2)^(-3)
}
}
sum=sum+sum1+sum(r[i,]^2)
}
sum
}#initial one
gU=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
r2=r[-i,]
y=(r[i,j]-r2[,j])/(((r2[,1]-r[i,1])^2+(r2[,2]-r[i,2])^2)^4)
frame[i,j]=2*r[i,j]-6*sum(y)
}
}
frame
}
gU2=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
sum=0
for(k in 1:N){
if(k!=i){
sum=sum+(r[i,j]-r[k,j])/(sum((r[i,]-r[k,])^2)^4)
}
}
frame[i,j]=2*r[i,j]-6*sum
}
}
frame
}#initial one
reinit<-function(N=17){
readRDS(file=paste("data/",N,".RDS",sep=""))
}
#temperature function
temp<-function(r, sd=1){
N=dim(r)[1]
vx=rnorm(N,sd=sd)
vx=(vx-sum(vx)/length(vx))
vy=rnorm(N,sd=sd)
vy=(vy-sum(vy)/length(vy))
data.frame(x=r$x,y=r$y,vx=vx,vy=vy)
}
E<-function(r){
N=dim(r)[1]
U(r[,1:2])+sum(r$vx^2)+sum(r$vy^2)
}
K=30000     #number of iterations
dt=0.0001       #delta t (should be small for more precision)
r=reinit(27)
r=temp(r,sd=0.5)
plot(r$x,r$y)
for(i in 1:K){
r[,1:2]=r[,1:2]+dt*r[,3:4]      #r step
r[,3:4]=r[,3:4]-dt*gU(r)        #v step
print(E(r))
points(r$x,r$y)
}
Es=NULL
#Molecular dynamic
K=30000     #number of iterations
dt=0.0001       #delta t (should be small for more precision)
r=reinit(27)
r=temp(r,sd=0.5)
plot(r$x,r$y)
Es=NULL
for(i in 1:K){
r[,1:2]=r[,1:2]+dt*r[,3:4]      #r step
r[,3:4]=r[,3:4]-dt*gU(r)        #v step
#print(E(r))
#points(r$x,r$y)
Es=c(Es,E(r))
}
length(es)
length(es)
length(Es)
plot(Es)
summary(Es)
K=30000     #number of iterations
dt=0.001       #delta t (should be small for more precision)
r=reinit(27)
r=temp(r,sd=0.5)
plot(r$x,r$y)
Es2=NULL
for(i in 1:K){
r[,1:2]=r[,1:2]+dt*r[,3:4]      #r step
r[,3:4]=r[,3:4]-dt*gU(r)        #v step
#print(E(r))
#points(r$x,r$y)
Es2=c(Es,E(r))
}
summary(Es2)
K=30000     #number of iterations
dt=0.001       #delta t (should be small for more precision)
r=reinit(27)
r=temp(r,sd=0.5)
plot(r$x,r$y)
Es2=NULL
for(i in 1:K){
r[,1:2]=r[,1:2]+dt*r[,3:4]      #r step
r[,3:4]=r[,3:4]-dt*gU(r)        #v step
#print(E(r))
#points(r$x,r$y)
Es2=c(Es2,E(r))
}
summary(Es2)
plot(Es2)
plot(Es)
plot(Es2)
summary(es)
summary(Es)
plot(Es)
K=300000     #number of iterations
dt=0.0001       #delta t (should be small for more precision)
r=reinit(27)
r=temp(r,sd=0.5)
plot(r$x,r$y)
Es=NULL
for(i in 1:K){
r[,1:2]=r[,1:2]+dt*r[,3:4]      #r step
r[,3:4]=r[,3:4]-dt*gU(r)        #v step
#print(E(r))
#points(r$x,r$y)
Es=c(Es,E(r))
}
init=function(N,sd=1){#generates N particles with x,y,z random coordinates
x=rnorm(N,sd=sd)
y=rnorm(N,sd=sd)
data.frame(x=x,y=y)
}
U=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
ind=1
for(i in 2:N){
ind[i]=N*(i-1)+i
}
frame=data.frame(id="0",rx=r$x,ry=r$y)
x=merge(frame,frame,by="id")
x=x[-ind,]
y=(x[,4]-x[,2])^2+(x[,5]-x[,3])^2
sum(y^(-3))/2+sum(r^2)
}
U3=function(r){
sum(mapply(function(xi,yi) {
sum(unlist(mapply(function(xk,yk) {
if(xi!=xk & yi!=yk){
((xi-xk)^2+(yi-yk)^2)^(-3)
}
},r$x,r$y)))
},r$x,r$y))/2+sum(r$x^2)+sum(r$y^2)
}#U rewritten as mapply(). It is not faster!
U4=function(r){
N=dim(r)[1]
if(N>2){
sum(sapply(1:(N-1),function(i) {
sum(sapply((i+1):N,function(k){
((r$x[i]-r$x[k])^2+(r$y[i]-r$y[k])^2)^(-3)
}))
}))+sum(r$x^2)+sum(r$y^2)
}
}#U rewritten as sapply(). It is not faster!
U2=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
sum=0
for(i in 1:N){
sum1=0
if(i!=N){
for(j in (i+1):N){
sum1=sum1+sum((r[i,]-r[j,])^2)^(-3)
}
}
sum=sum+sum1+sum(r[i,]^2)
}
sum
}#initial one
gU=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
r2=r[-i,]
y=(r[i,j]-r2[,j])/(((r2[,1]-r[i,1])^2+(r2[,2]-r[i,2])^2)^4)
frame[i,j]=2*r[i,j]-6*sum(y)
}
}
frame
}
gU2=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
sum=0
for(k in 1:N){
if(k!=i){
sum=sum+(r[i,j]-r[k,j])/(sum((r[i,]-r[k,])^2)^4)
}
}
frame[i,j]=2*r[i,j]-6*sum
}
}
frame
}#initial one
reinit<-function(N=17){
readRDS(file=paste("data/",N,".RDS",sep=""))
}
#temperature function
temp<-function(r, sd=1){
N=dim(r)[1]
vx=rnorm(N,sd=sd)
vx=(vx-sum(vx)/length(vx))
vy=rnorm(N,sd=sd)
vy=(vy-sum(vy)/length(vy))
data.frame(x=r$x,y=r$y,vx=vx,vy=vy)
}
E<-function(r){
N=dim(r)[1]
U(r[,1:2])+sum(r$vx^2)+sum(r$vy^2)
}
K=3000    #number of iterations
dt=0.0001       #delta t (should be small for more precision)
r=reinit(27)
r=temp(r,sd=0.5)
plot(r$x,r$y)
Es=NULL
for(i in 1:K){
r[,1:2]=r[,1:2]+dt*r[,3:4]      #r step
r[,3:4]=r[,3:4]-dt*gU(r)        #v step
#print(E(r))
#points(r$x,r$y)
Es=c(Es,E(r))
}
length(Es)
head(Es)
sd(Es)
summary(Es)
plot(Es)
K=3000    #number of iterations
dt=0.0001       #delta t (should be small for more precision)
dt1=0.001
dt2=0.01
r=reinit(27)
r=temp(r,sd=0.5)
r1=r
r2=r
plot(r$x,r$y)
Es=NULL
Es1=NULL
Es2=NULL
for(i in 1:K){
r[,1:2]=r[,1:2]+dt*r[,3:4]      #r step
r[,3:4]=r[,3:4]-dt*gU(r)        #v step
r1[,1:2]=r1[,1:2]+dt1*r1[,3:4]      #r step
r1[,3:4]=r1[,3:4]-dt1*gU(r1)        #v step
r2[,1:2]=r2[,1:2]+dt2*r2[,3:4]      #r step
r2[,3:4]=r2[,3:4]-dt2*gU(r2)        #v step
#print(E(r))
#points(r$x,r$y)
Es=c(Es,E(r))
Es1=c(Es1,E(r1))
Es2=c(Es2,E(r2))
}
length(Es)
length(es1)
length(Es1)
length(Es2)
plot((1:3000)*dt,Es)
points((1:3000)*dt1,Es1,col="red")
points((1:3000)*dt2,Es2,col="red")
points((1:3000)*dt2,Es2,col="blue")
plot(Es1)
plot(Es2)
