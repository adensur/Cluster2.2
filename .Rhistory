r[,3:4]=r[,3:4]-dt*gU(r)        #v step
Es=c(Es,E(r))
Vs=c(Vs,sqrt(r$vx^2+r$vy^2))
}
t=t+10000*dt
out=c(out,list(t=t,Vs=Vs))
print(i)
}
length(ou)
length(out)
hist(out[2],100)
hist(out[[2]],100)
hist(out[[4]],100)
hist(out[[6]],100)
hist(out[[100]],100)
hist(out[[100]],20)
hist(out[[100]],100)
hist(out[[200]],100)
out[199]
out[[c(2,4)]]
length(out[[2]])
length(c(out[[2]],out[[4]]))
hist(c(out[[198]],out[[196]]),100)
i=seq(2,200,by=2)
i
x
x=NULL
for(j in i){
x=c(x,out[[j]])
}
length(x)
hist(x,100)
x=NULL
for(j in i{1:2}){
x=c(x,out[[j]])
}
x=NULL
for(j in i[1:2]){
x=c(x,out[[j]])
}
hist(x,100)
x=NULL
for(j in i[1:10]){
x=c(x,out[[j]])
}
hist(x,100)
x=NULL
for(j in i[1:5]){
x=c(x,out[[j]])
}
x=NULL
for(j in i[1:5]){
x=c(x,out[[j]])
}
hist(x,100)
length(i)
x=NULL
for(j in i[95:100]){
x=c(x,out[[j]])
}
hist(x,100)
x=NULL
for(j in i[1:5]){
x=c(x,out[[j]])
}
hist(x,100)
x=NULL
for(j in i[1:10]){
x=c(x,out[[j]])
}
hist(x,100)
i[10]
out[[19]]
E(r)-U(r0)
out[2]
out[1]
out[3]
dt=0.0001       #delta t (should be small for more precision)
r0=reinit(27)
t=0
r=temp(r0,sd=1.5)
out=list()
for(i in 1:5){
Vs=NULL
for(j in 1:10000){
r[,1:2]=r[,1:2]+dt*r[,3:4]      #r step
r[,3:4]=r[,3:4]-dt*gU(r)        #v step
Es=c(Es,E(r))
Vs=c(Vs,sqrt(r$vx^2+r$vy^2))
}
t=t+10000*dt
out=c(out,list(t=t,Vs=Vs))
print(i)
}
init=function(N,sd=1){#generates N particles with x,y,z random coordinates
x=rnorm(N,sd=sd)
y=rnorm(N,sd=sd)
data.frame(x=x,y=y)
}
U=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
ind=1
for(i in 2:N){
ind[i]=N*(i-1)+i
}
frame=data.frame(id="0",rx=r$x,ry=r$y)
x=merge(frame,frame,by="id")
x=x[-ind,]
y=(x[,4]-x[,2])^2+(x[,5]-x[,3])^2
sum(y^(-3))/2+sum(r^2)
}
U3=function(r){
sum(mapply(function(xi,yi) {
sum(unlist(mapply(function(xk,yk) {
if(xi!=xk & yi!=yk){
((xi-xk)^2+(yi-yk)^2)^(-3)
}
},r$x,r$y)))
},r$x,r$y))/2+sum(r$x^2)+sum(r$y^2)
}#U rewritten as mapply(). It is not faster!
U4=function(r){
N=dim(r)[1]
if(N>2){
sum(sapply(1:(N-1),function(i) {
sum(sapply((i+1):N,function(k){
((r$x[i]-r$x[k])^2+(r$y[i]-r$y[k])^2)^(-3)
}))
}))+sum(r$x^2)+sum(r$y^2)
}
}#U rewritten as sapply(). It is not faster!
U2=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
sum=0
for(i in 1:N){
sum1=0
if(i!=N){
for(j in (i+1):N){
sum1=sum1+sum((r[i,]-r[j,])^2)^(-3)
}
}
sum=sum+sum1+sum(r[i,]^2)
}
sum
}#initial one
gU=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
r2=r[-i,]
y=(r[i,j]-r2[,j])/(((r2[,1]-r[i,1])^2+(r2[,2]-r[i,2])^2)^4)
frame[i,j]=2*r[i,j]-6*sum(y)
}
}
frame
}
gU2=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
sum=0
for(k in 1:N){
if(k!=i){
sum=sum+(r[i,j]-r[k,j])/(sum((r[i,]-r[k,])^2)^4)
}
}
frame[i,j]=2*r[i,j]-6*sum
}
}
frame
}#initial one
reinit<-function(N=17){
readRDS(file=paste("data/",N,".RDS",sep=""))
}
#temperature function
temp<-function(r, sd=1){
N=dim(r)[1]
vx=rnorm(N,sd=sd)
vx=(vx-sum(vx)/length(vx))
vy=rnorm(N,sd=sd)
vy=(vy-sum(vy)/length(vy))
data.frame(x=r$x,y=r$y,vx=vx,vy=vy)
}
E<-function(r){
N=dim(r)[1]
U(r[,1:2])+sum(r$vx^2)/2+sum(r$vy^2)/2
}
init=function(N,sd=1){#generates N particles with x,y,z random coordinates
x=rnorm(N,sd=sd)
y=rnorm(N,sd=sd)
data.frame(x=x,y=y)
}
U=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
ind=1
for(i in 2:N){
ind[i]=N*(i-1)+i
}
frame=data.frame(id="0",rx=r$x,ry=r$y)
x=merge(frame,frame,by="id")
x=x[-ind,]
y=(x[,4]-x[,2])^2+(x[,5]-x[,3])^2
sum(y^(-3))/2+sum(r^2)
}
U3=function(r){
sum(mapply(function(xi,yi) {
sum(unlist(mapply(function(xk,yk) {
if(xi!=xk & yi!=yk){
((xi-xk)^2+(yi-yk)^2)^(-3)
}
},r$x,r$y)))
},r$x,r$y))/2+sum(r$x^2)+sum(r$y^2)
}#U rewritten as mapply(). It is not faster!
U4=function(r){
N=dim(r)[1]
if(N>2){
sum(sapply(1:(N-1),function(i) {
sum(sapply((i+1):N,function(k){
((r$x[i]-r$x[k])^2+(r$y[i]-r$y[k])^2)^(-3)
}))
}))+sum(r$x^2)+sum(r$y^2)
}
}#U rewritten as sapply(). It is not faster!
U2=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
sum=0
for(i in 1:N){
sum1=0
if(i!=N){
for(j in (i+1):N){
sum1=sum1+sum((r[i,]-r[j,])^2)^(-3)
}
}
sum=sum+sum1+sum(r[i,]^2)
}
sum
}#initial one
gU=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
r2=r[-i,]
y=(r[i,j]-r2[,j])/(((r2[,1]-r[i,1])^2+(r2[,2]-r[i,2])^2)^4)
frame[i,j]=2*r[i,j]-6*sum(y)
}
}
frame
}
gU2=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
sum=0
for(k in 1:N){
if(k!=i){
sum=sum+(r[i,j]-r[k,j])/(sum((r[i,]-r[k,])^2)^4)
}
}
frame[i,j]=2*r[i,j]-6*sum
}
}
frame
}#initial one
reinit<-function(N=17){
readRDS(file=paste("data/",N,".RDS",sep=""))
}
#temperature function
temp<-function(r, sd=1){
N=dim(r)[1]
vx=rnorm(N,sd=sd)
vx=(vx-sum(vx)/length(vx))
vy=rnorm(N,sd=sd)
vy=(vy-sum(vy)/length(vy))
data.frame(x=r$x,y=r$y,vx=vx,vy=vy)
}
E<-function(r){
N=dim(r)[1]
U(r[,1:2])+sum(r$vx^2)/2+sum(r$vy^2)/2
}
r=reinit(5)
plot(r)
r
U(r)
r=reinit(1)
r
r=reinit(17)
plot(r)
plot(reinit(5))
qplot(data=reinit(5),x=x,y=y)
library(ggplot2)
qplot(data=reinit(5),x=x,y=y)
qplot(data=reinit(5),x=x,y=y,size=2)
ggplot(data=reinit(5),aes(x=x,y=y))+geom_point(size=3)
ggplot(data=reinit(2),aes(x=x,y=y))+geom_point(size=3)
ggplot(data=reinit(2),aes(x=x,y=y))+geom_point(size=3)
ggplot(data=reinit(3),aes(x=x,y=y))+geom_point(size=3)
ggplot(data=reinit(3),aes(x=x,y=y))+geom_point(size=3)+geom_point(x=0,y=0,size=5,color="blue",alpha=0.5)
ggplot(data=reinit(3),aes(x=x,y=y))+geom_point(size=3)+geom_point(x=0,y=0,size=5,color="blue",alpha=0.1)
ggplot(data=reinit(3),aes(x=x,y=y))+geom_point(size=3)+geom_point(x=0,y=0,size=5,color="blue",alpha=0.1)+scale_x_continuous(limits=c(-2,2))+
scale_y_continuous(limits=c(-2,2))
ggplot(data=reinit(3),aes(x=x,y=y))+geom_point(size=3)+geom_point(x=0,y=0,size=5,color="red",alpha=0.1)+scale_x_continuous(limits=c(-2,2))+
scale_y_continuous(limits=c(-2,2))
ggplot(data=reinit(i),aes(x=x,y=y))+geom_point(size=3)+geom_point(x=0,y=0,size=5,color="red",alpha=0.1)+scale_x_continuous(limits=c(-2,2))+
scale_y_continuous(limits=c(-2,2))+labs(main=paste("Равновесное состояние при T=0 для двумерного кластера из ",i," частиц",sep=""))
i=3
ggplot(data=reinit(i),aes(x=x,y=y))+geom_point(size=3)+geom_point(x=0,y=0,size=5,color="red",alpha=0.1)+scale_x_continuous(limits=c(-2,2))+
scale_y_continuous(limits=c(-2,2))+labs(main=paste("Равновесное состояние при T=0 для двумерного кластера из ",i," частиц",sep=""))
ggplot(data=reinit(i),aes(x=x,y=y))+geom_point(size=3)+geom_point(x=0,y=0,size=5,color="red",alpha=0.1)+scale_x_continuous(limits=c(-2,2))+
scale_y_continuous(limits=c(-2,2))+labs(title=paste("Равновесное состояние при T=0 для двумерного кластера из ",i," частиц",sep=""))
i=4
ggplot(data=reinit(i),aes(x=x,y=y))+geom_point(size=3)+geom_point(x=0,y=0,size=5,color="red",alpha=0.1)+scale_x_continuous(limits=c(-2,2))+
scale_y_continuous(limits=c(-2,2))+labs(title=paste("Равновесное состояние при T=0 для двумерного кластера из ",i," частиц",sep=""))
i=5
ggplot(data=reinit(i),aes(x=x,y=y))+geom_point(size=3)+geom_point(x=0,y=0,size=5,color="red",alpha=0.1)+scale_x_continuous(limits=c(-2,2))+
scale_y_continuous(limits=c(-2,2))+labs(title=paste("Равновесное состояние при T=0 для двумерного кластера из ",i," частиц",sep=""))
r=reinit(5)
descent=function(r,lambda=0.5,K=1000,print=FALSE){
for(k in 1:K){
gu=gU(r)
if(U(r-l*gu)<U(r)){
r=r-l*gu
l=0.5
}else{
l=l/5
}
if(print){print(U(r))}
}
r
}
r
U(r)
descent(r,print=TRUE)
descent(init(5),print=TRUE)
descent=function(r,lambda=0.3,K=1000,print=FALSE){
for(k in 1:K){
gu=gU(r)
if(U(r-l*gu)<U(r)){
r=r-l*gu
l=0.5
}else{
l=l/5
}
if(print){print(U(r))}
}
r
}
descent(r,print=TRUE)
r=init(5)
r
descent(r,print=TRUE)
init=function(N,sd=1){#generates N particles with x,y,z random coordinates
x=rnorm(N,sd=sd)
y=rnorm(N,sd=sd)
data.frame(x=x,y=y)
}
U=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
ind=1
for(i in 2:N){
ind[i]=N*(i-1)+i
}
frame=data.frame(id="0",rx=r$x,ry=r$y)
x=merge(frame,frame,by="id")
x=x[-ind,]
y=(x[,4]-x[,2])^2+(x[,5]-x[,3])^2
sum(y^(-3))/2+sum(r^2)
}
U3=function(r){
sum(mapply(function(xi,yi) {
sum(unlist(mapply(function(xk,yk) {
if(xi!=xk & yi!=yk){
((xi-xk)^2+(yi-yk)^2)^(-3)
}
},r$x,r$y)))
},r$x,r$y))/2+sum(r$x^2)+sum(r$y^2)
}#U rewritten as mapply(). It is not faster!
U4=function(r){
N=dim(r)[1]
if(N>2){
sum(sapply(1:(N-1),function(i) {
sum(sapply((i+1):N,function(k){
((r$x[i]-r$x[k])^2+(r$y[i]-r$y[k])^2)^(-3)
}))
}))+sum(r$x^2)+sum(r$y^2)
}
}#U rewritten as sapply(). It is not faster!
U2=function(r){#scalar function. Returns potential energy of r-type object
N=dim(r)[1]
sum=0
for(i in 1:N){
sum1=0
if(i!=N){
for(j in (i+1):N){
sum1=sum1+sum((r[i,]-r[j,])^2)^(-3)
}
}
sum=sum+sum1+sum(r[i,]^2)
}
sum
}#initial one
gU=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
r2=r[-i,]
y=(r[i,j]-r2[,j])/(((r2[,1]-r[i,1])^2+(r2[,2]-r[i,2])^2)^4)
frame[i,j]=2*r[i,j]-6*sum(y)
}
}
frame
}
gU2=function(r){#returns gradient of r object in same, N*3, form
N=dim(r)[1]
frame=data.frame(x=0,y=0)
for(i in 1:N){
for(j in 1:2){
sum=0
for(k in 1:N){
if(k!=i){
sum=sum+(r[i,j]-r[k,j])/(sum((r[i,]-r[k,])^2)^4)
}
}
frame[i,j]=2*r[i,j]-6*sum
}
}
frame
}#initial one
reinit<-function(N=17){
readRDS(file=paste("data/",N,".RDS",sep=""))
}
#temperature function
temp<-function(r, sd=1){
N=dim(r)[1]
vx=rnorm(N,sd=sd)
vx=(vx-sum(vx)/length(vx))
vy=rnorm(N,sd=sd)
vy=(vy-sum(vy)/length(vy))
data.frame(x=r$x,y=r$y,vx=vx,vy=vy)
}
E<-function(r){
N=dim(r)[1]
U(r[,1:2])+sum(r$vx^2)/2+sum(r$vy^2)/2
}
descent=function(r,lambda=0.3,K=1000,print=FALSE){
for(k in 1:K){
gu=gU(r)
if(U(r-l*gu)<U(r)){
r=r-l*gu
l=0.5
}else{
l=l/5
}
if(print){print(U(r))}
}
r
}
descent(r,print=TRUE)
for(k in 1:K){
gu=gU(r)
if(U(r-l*gu)<U(r)){
r=r-l*gu
l=0.5
}else{
l=l/5
}
#print(c(k,U(r),l))
}
U(r)
r
gU(r)
descent=function(r,lambda=0.3,K=1000,print=FALSE){
for(k in 1:K){
gu=gU(r)
if(U(r-l*gu)<U(r)){
r=r-l*gu
lambda=0.5
}else{
lambda=lambda/5
}
if(print){print(U(r))}
}
r
}
descent(r,print=TRUE)
descent=function(r,lambda=0.3,K=1000,print=FALSE){
for(k in 1:K){
l=lambda
gu=gU(r)
if(U(r-l*gu)<U(r)){
r=r-l*gu
l=lambda
}else{
l=l/5
}
if(print){print(U(r))}
}
r
}
descent(r,print=TRUE)
gU(r)
plot(r)
r=init(15)
descent(r,print=TRUE)
r
U(r)
gU(r)
U(r-gU(r))
r
